/*
 * deploy
 */

//projectを展開する

projects.tplディレクトリを参考に、projectsディレクトリ内に同様のフォルダ構造を作ります。
ディレクトリ名称は任意ですが、projects.iniに、HTTP_HOSTの値とペアになるディレクトリ（およびviewディレクトリ）のセットを書き定義してください。

projects.iniのcli_hostの値は、oilコマンドがコマンドラインから実行する際のHTTP_HOSTの値です。
なおここで設定したcli_hostと違う値でoilコマンドを実行したい場合は、

LOCOMO_ENV=develop php oil refine migrate:up --modules=acl

というように、LOCOMO_ENVの値で環境変数を送信すれば、任意のcli_hostで実行できます。

//APPPATH.config/development/db.php 

APPPATHのdb.phpを以下のように設定します。

▼ここから────────────────
<?php
return \Fuel::load(PKGPROJPATH.'config/db.php');
────────────────ここまで▲

それぞれのプロジェクトのconfigのdb.phpに、データベース接続情報を設定します。

//oil

oilコマンドで基礎モジュールのmigrationを実行してください（ACLを最初にrefineしてください）。

php oil refine migrate:up --modules=acl
php oil refine migrate:up --modules=user
php oil refine migrate:up --modules=workflowadmin
php oil refine migrate:up --modules=revision

//APPPATH.config/config.php

always_loadに、locomoを足してください。

security設定をしてください。
	'security' => array(
		 'csrf_autoload'    => false,
		 'csrf_token_key'   => 'locomo_csrf_token',
		 'csrf_expiration'  => 300,

/*
 * モジュール開発
 */

Locomoパッケージ（以下locomo）はfuelphpのmoduleを基礎にしています。

locomoを用いて構築する際は、原則PKGPATH.'/projects/PROJECTNAME/modules/'以下に、以下のような構成のファイルをおいてください。locomoのscaffoldを使うと簡単に生成できます。

locomoには、基本的なcrudを実装した基礎classがあります。この基礎classは、fuelのclassを継承していますが、必ず使わなくていけないということはありません。必要に応じてfuelのclassを直に継承して問題はありません。

パッケージコアモジュールのclassをオーバライドする場合は、プロジェクトのmodulesのなかにパッケージコアモジュールと同じ名前のディレクトリを作ってください。

/*
 * テンプレートのオーバライド
 */

モジュールのテンプレートだけオーバライドする場合は、PROJPATH.views/MODNAME/views/に同じ名前のファイルで設置してください。inc_header等のオーバライドに関しては、PROJPATH.views/に設置できます。

/*
 * 特別な名前のカラム
 */

tableを作るとき、以下のカラム名は特別な仕事をします。

//status:varchar[20]:null
//項目の状態を示すカラムです

is_visible:int:null
可視属性フラグです。

deleted_at:datetime:null
削除フラグです。nullのときは表示され、dateが入っているときには削除されたことになります。

created_at:datetime:null
作成日です。未来の日付が入っていると予約項目になります。

expired_at:datetime:null
表示期日です。過去の日付が入っていると表示終了になります。

/*
 * revision（編集履歴）
 */

revisionを適用したいコントローラとアクションセットで、Traitを追加します。
scaffoldを使った場合はコメントアウトされています。

	use \Revision\Traits_Controller_Revision;
	use \Revision\Traits_Actionset_Revision;

モデルでは、observerを足してください。

		'Locomo\Observer_Revision' => array(
			'events' => array('after_insert', 'after_save'),
		),

またモデルで、そのモデルの項目の表題名にあたるフィールド名を設定してください。
	public static $_subject_field_name = 'SOME_TRAITS_USE_SUBJECT_FIELD_NAME';

これでモジュールでの編集履歴が有効になります。

/*
 * ワークフロー管理
 */

ワークフローを適用したいコントローラとモデルとアクションセットで、Traitを追加します。
scaffoldを使った場合はコメントアウトされています。

	use \Workflow\Traits_Controller_Workflow;
	use \Workflow\Traits_Model_Workflow;
	use \Workflow\Traits_Actionset_Base_Workflow;

対象モデルの$_propertiesにworkflow_statusを足します。
対象モデルにobserverを追加します。

		'Workflow\Observer_Workflow' => array(
			'events' => array('before_insert', 'before_save','after_load'),
		),

/*
 * バルク編集
 */
