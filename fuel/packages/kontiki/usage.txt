/*
 * deploy
 */

//APPPATH.config/development/db.php 

データベース接続情報を設定する

//oil

php oil refine migrate:up --modules=acl
php oil refine migrate:up --modules=user
php oil refine migrate:up --modules=usergroup
php oil refine migrate:up --modules=users_usergroups_r
php oil refine migrate:up --modules=loginlog

//APPPATH.config/config.php

- always_loadに、kontikiをたす

- Security settingsの
	'csrf_autoload'    => false,
	'csrf_token_key'   => 'fuel_csrf_token',
	'csrf_expiration'  => 0,
	コメントアウトを外す

//APPPATH.config/routes.php

- トップページと404を変更
	'_root_'  => 'content/home',
	'_404_'   => 'content/404',

/*
 * Development
 */

Kontikiパッケージ（以下kontiki）はfuelphpのmoduleを基礎にしています。

kontikiを用いて構築する際は、原則PKGPATH.'kontiki/modules/'以下に、以下のような構成のファイルをおいてください。kontikiのscaffoldを使うと簡単に生成できます。

MODNAME
- classes
	- controller
		- MODNAME.php
	- model
		- MODNAME.php
	- view
		- MODNAME.php
- migrations
- config
	- MODNAME.php
- views

ただし、コントローラをコンパクトに書くための独自ルーティングがあります。
modules/MODNAME/classes/controller/MODNAME_ACTNAME.phpで、1ファイルに1つのアクションを独立して書くことができます。この際、継承するclassは適宜気をつけてください。ほとんどの場合は、\kontiki\controllerでなく、MODNAMEにあたるclassを継承することになるはずです。

kontikiには、基本的なcrudを実装した基礎classがあります。この基礎classは、fuelのclassを継承していますが、必ず使わなくていけないということはありません。必要に応じてfuelのclassを直に継承して問題はありません。

/*
 * revision（編集履歴）
 */

kontikiのscaffoldを利用している場合は、コントローラの

unset( self::$actionset->view_revision );

をコメントアウト（あるいは削除すると）、コントローラでの編集履歴が有効になります。
編集履歴は、action_edit()と依存関係にあるので、action_edit()以外の編集方法を用いている場合は、うまく動作しません。
あと任意ですが、対象コントローラの編集画面に下記フォームを足すと、コメントとして保存されます。

<div class="form-group revision_comment">
	<?php echo Form::label('編集メモ', 'revision_comment')); ?>
	<?php echo Form::textarea('revision_comment', Input::post('revision_comment', isset($item->comment) ? $item->comment : '')); ?>
</div>

/*
 * ワークフロー管理
 */

ワークフロー管理をするためには、kontikiのscaffoldで出来上がったset_actionsetのWorkflow関連部分のコメントアウトを外してください。あとclass宣言部分のextendsもとを\Kontiki\Controller_Workflowに差し替えてください。
