/**
 * development
 */

// locomoパス

Locomoパッケージ（以下locomo）では、モジュールやコントローラを起動するためのURI（パス）を、しばしば以下のように記述します。

[\Namespace]\Controller_Name/action

完全なコントローラのクラス名のあとにスラッシュでアクション名を書きます。これを「locomoパス（locomo-path）」と呼称します。定数のLOCOMOPATHとは異なりますので、注意してください。

// $locomo

LocomoはFuelPHPのcontrollerとmoduleを基礎にしています。
scaffoldを使うとモジュールが生成されますが、APPPATH/classes/controllerにコントローラを配置しても機能します。
その際、コントローラは必要に応じて、\Locomo\Controller_Baseを継承してください。\Locomo\Controller_Baseを継承しない場合、モジュールにアクセスはできますが、アクセス権限管理の対象から外れます。

またLocomo管理下に置かれるコントローラ／モジュールには、$locomoというメンバ変数があることを期待されます。

+quote start-----------------------------+
	// locomo
	public static $locomo = array(
		// (str)	name for human
		'nicename' => 'ユーザ',
		// (bool)	show at menus
		'show_at_menu' => true,
		// (int)	order at menu
		'order' => 10,
		// (bool)	true: not appear to acl menu
		'is_for_admin' => true,
		// (bool)	true: not appear to acl menu
		'no_acl' => true,
		 // (str)	explanation of controller
		'explanation'  => 'システムを利用するユーザの新規作成、編集、削除等を行います。',
		 // (str)	main action
		'main_action'  => 'index_admin',
		 // (str)	main action's name
		'main_action_name' => 'ユーザ管理',
		 // (str)	explanation of top page
		'main_action_explanation' => '既存ユーザの一覧です。',
		// (arr)	widgets
		'widgets' =>array(
		),
	);
+-------------------------------quote end+

モジュールの場合は、Locomoは、モジュール名と同名のconfigが存在することを期待します。configでは、最低限、一つの項目、main_controllerを持っている必要があります。configのnicename、explanation、orderは推奨項目です。
なお、モジュールがconfigを持っていない場合、\Locomo\Controller_Baseを継承していても、モジュールは管理画面のコントローラリストやアクセス権限管理コントローラの対象になりません。しかし、\Locomo\Controller_Baseを継承するとアクセス権限チェックは行われるので、別途アクセス権限管理を実装する必要があります。

+quote start-----------------------------+
return array(
	'main_controller' => '\\Mod\\Controller_Mod', // required
	'nicename'        => 'MODULE NICENAME',
	'explanation'     => 'XXを行います。',
	'order'           => 10,
);
+-------------------------------quote end+

// actionset - overview

アクションセットは、ユーザインタフェイスの提供とアクセス権管理の設定用クラスです。
ユーザインタフェイス（リンク）が表示される画面上のデフォルトの領域（レルム）が4つあります。

+------------------------------------+
|global admin bar                    |
+------------------------------------+
|[base][index]         [ctrl][option]|
+------------------------------------+
|                                    |

[base]  : 基本的な操作系のリンクです。
[ctrl]  : アクション固有のリンクです。「戻る」などのリンクが主です。
[option]: コントローラやモジュールの設定を変更するリンクです。ギアマークのドロップダウンに格納されます。
[index] : 一覧を切り替えるリンクです。

// actionset - disable default actionset

基本的なアクションセットのクラスを使いつつ、しかし一部アクションセットを無効にしたい場合は、以下のように無効にしたいアクションセットでarray()をreturnしてください。

+quote start-----------------------------+
	public static function actionset_index($controller, $obj = null, $id = null, $urls = array())
	{
		return array();
	}
+-------------------------------quote end+

あるいは基本的なアクションセットのクラスを使いつつ、少しだけ改変したい場合も下記のような要領です。
リンク先だけ変更している例です。

+quote start-----------------------------+
	public static function actionset_index($controller, $obj = null, $id = null, $urls = array())
	{
		$urls = array(array($controller.DS."index_XXX", 'リンク文字列'),);
		$retvals = parent::actionset_index($controller, $obj, $id, $urls);
		\Arr::set($retvals, 'urls', $urls);
		return $retvals;
	}
+-------------------------------quote end+

// actionset - prepare user interface

アクションセットのメソッドはactionset_という接頭辞を必要とします。この接頭辞がない場合は、アクションセットとして機能しませんので、一旦停止したい場合などは、_actionset_というようにすることもできます。接頭辞の後には、アクション名を書きます。
このアクション名は任意の値でもかまいませんが、ヘルプドキュメントを持つアクションセットの場合は、実際のアクションとあわせてください。コントローラに存在しないアクション名のアクションセットの場合は、ヘルプが表示されません。

+quote start-----------------------------+
	/**
	 * edit()
	 */
	public static function actionset_edit($controller, $obj = null, $id = null, $urls = array())
	{
		if (\Request::main()->action == 'view' && $id):
			$urls = array(array($controller.DS."edit/".$id, '編集'));
		endif;

		$retvals = array(
			'realm'        => 'base' ,
			'urls'         => $urls ,
			'show_at_top'  => false,
			'action_name'  => '編集（通常項目）',
			'acl_exp'      => '通常項目の編集権限',
			'explanation'  => '通常項目を編集します',
			'help'         => '編集のヘルプ',
			'order'        => 30,
			'dependencies' => array(
				$controller.DS.'view',
				$controller.DS.'edit',
			)
		);
		return $retvals;
	}
+-------------------------------quote end+

$retvalsで返される項目が、\Locomo\Actionsetで判定されます。
urlsには、完全なa要素を配列でセットしてください。
コントローラにいる間、常に表示されていてよいリンクの場合は、そのままa要素を渡してもいいのですが、だいたいはリンクが表示されてほしいタイミングがあります。上記例は個別の項目の編集へのリンクなので、個別の項目を表示しているときに表示してほしいものです。ので

if (\Request::main()->action == 'view' && $id):

で、アクションがviewのときで$idが存在しているとき──つまり個別項目を表示しているとき──に編集へのリンクを表示します。

// actionset - acl

アクションセットで設定されているdependenciesは、アクションセットのリンクを表示する上で必要なアクションです。ここにはlocomo-pathのuriを配列で渡します。ここで設定したものがlocomoのaclの画面に表示され、管理の対象になります。

// config

configにnicenameとmain_controllerを設定してください。nicenameは人間用にコントローラ（モジュール）名を読みやすくしたもの。main_controllerは、これを使って、モジュールの代表画面を設定します。
モジュールの場合は、モジュールディレクトリのconfigのなか、モジュールでない場合は、APPPATH.configにあるコントローラ名と同名のconfigを参照します。

// exclusive acl

configでは、通常のaclと異なったアクセス権管理を行いたい際のメソッドを指定する項目があります。conditioned_allowedに、locomo-pathとメソッド名を配列で指定します。

+quote start-----------------------------+
	'conditioned_allowed' => array(
		'\\User\\Controller_User/view/' => array('\\User\\Controller_User', 'user_auth_find'),
		'\\User\\Controller_User/edit/' => array('\\User\\Controller_User', 'user_auth_find'),
	),
+-------------------------------quote end+

この例では、userモジュールのviewとeditにおいて、特別なアクセス権管理を行う処理を\User\Controller_Userのuser_auth_find()で定義しています。
# もしかしたら、Eventに変更するかも？

// template override

Locomoの基本コントローラのテンプレートだけオーバライドする場合は、APPPATH.views/CONTROLLER/views/に同じ名前のファイルで設置してください。inc_header等のオーバライドに関しては、APPPATH.views/に設置できます。

// column name

tableを作るとき、以下のカラム名は特別な仕事をします。

is_visible:int:null
可視属性フラグです。

deleted_at:datetime:null
削除フラグです。nullのときは表示され、dateが入っているときには削除されたことになります。

created_at:datetime:null
作成日です。未来の日付が入っていると予約項目になります。

updated_at:datetime:null
更新日です。

expired_at:datetime:null
表示期日です。過去の日付が入っていると表示終了になります。

creator_id:int[5]
updater_id:int[5]
作成者idと編集者idが格納されます。

workflow_status:varchar[50]
ワークフローを適用するコントローラでは必要です。

seq:int[n]
orderはいちおうMySQLの予約語なので、表示順を制御する際は、seqを使ってください。

これらの条件は、Model::authorized_option()等で判定材料にされ、tableの構成とユーザの権限にあわせて、表示権限等を制御します。

// Model::cascade_set()

モデルでORM用のリレーションを設定している場合、Model::cascade_set()でsave()に適した形のオブジェクトを生成できます。また、このメソッドは、リレーション先のバリデーションを同時に行うので、bool値を返します。

// revision

revisionを適用したいコントローラとアクションセットで、Traitを追加します。
scaffoldを使った場合はコメントアウトされています。

	use \Controller_Traits_Revision;
	use \Actionset_Traits_Revision;

モデルでは、observerを足してください。

		'\Observer_Revision' => array(
			'events' => array('after_insert', 'after_save'),
		),

またモデルで、そのモデルの項目の表題名にあたるフィールド名を設定してください。
$_propertiesの当該fieldに、
			'lcm_role' => 'subject',
を設定します。

以上でコントローラでの編集履歴が有効になります。

// workflow

ワークフローを適用したいコントローラとモデルとアクションセットで、Traitを追加します。
scaffoldを使った場合はコメントアウトされています。

	use \Controller_Traits_Wrkflw;
	use \Model_Traits_Wrkflw;
	use \Actionset_Traits_Wrkflw;

最初からワークフロー想定の場合は、migrationに追加する。

'workflow_status' => array('constraint' => '"init","in_progress","before_progress","finish"', 'type' => 'enum', 'null' => true),

なければ、MySQLで直接足す。

ALTER TABLE TABLE_NAME ADD `workflow_status` ENUM('init', 'in_progress','before_progress', 'finish');

対象モデルの$_propertiesにworkflow_statusを足します。

		'workflow_status' => array ('form' => array ('type' => false,),),

対象モデルにobserverを追加します。

		'Locomo\Observer_Wrkflw' => array(
			'events' => array('before_insert', 'before_save','after_load'),
		),

以上でコントローラでのワークフロー管理が有効になります。

// bulk edit

バルク編集（複数項目の一括編集）をするためには、バルク編集用のアクションを作ります。
バルク編集用のアクションでは、対象となるモデルを設定してください。以下の例はユーザモジュールのユーザグループです。モデルは、\Model_Usrgrpとなっています。

+quote start-----------------------------+
	public function action_bulk($page_num = 1)
	{
		// bulk
		\Model_Usrgrp::disable_filter();
		$form = $this->bulk(array(), array(), '\Model_Usrgrp');

		//assin
		$view = \View::forge(LOCOMOPATH.'modules/bulk/views/bulk.php');
		$view->set_global('title', 'ユーザグループ設定');
		$view->set_global('form', $form, false);
		$this->base_assign();
		$this->template->content = $view;
	}
+-------------------------------quote end+

バルク編集に関しては、\Admin\Controller_Admin::action_edit()にもちょっと違ったサンプルがあります。こちらはtabular formを使ったサンプルで、\Admin\Model_Adminや\Admin\Model_Userなど、専用のリレーションモデルを対象にした事例です。

// dashboard widget

コントローラクラスの$locomoにwidgetsを宣言すると、ダッシュボードウィジェットの候補にできます。以下はuserモジュールの例です。

+quote start-----------------------------+
		'widgets' =>array(
			array('name' => '新規ユーザ一覧', 'uri' => '\\User\\Controller_User/index_admin?order_by%5B0%5D%5B0%5D=id&order_by%5B0%5D%5B1%5D=desc'),
			array('name' => '新規ユーザ登録', 'uri' => '\\User\\Controller_User/create'),
		),
+-------------------------------quote end+

原則、ウィジェット件名をキーとして、locomo-pathと引数をクエリストリングスの形式で渡します。一点注意が必要なのは、index_adminに渡すようなクエリストリングスでなくfind()に渡すような形式で渡す必要がある、ということです。

この例では、

order_by%5B0%5D%5B0%5D=id&order_by%5B0%5D%5B1%5D=desc

ですが、これは以下のように生成した文字列です。

$q = \Uri::build_query_string(array('order_by' => array(array('id', 'desc')))) ;

ウィジェットもaclの対象です。コントローラがウィジェットを宣言していても、アクセス権がなければ、そのユーザのウィジェットの候補にも挙がりません。


/*
include(LOCOMOPATH.'migrations/005_create_help.php');
include(LOCOMOPATH.'migrations/006_create_hlp.php');
$h = new \Fuel\Migrations\Create_hlp();
$h->up();
*/
